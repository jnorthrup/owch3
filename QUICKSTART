to test out the concept of the owch kernel you will want to try the
following


1) type 'make' in owch2.  cygwin is handy for windows users.  
2) open 2 terminals
3) in the first terminal run java -classpath . Cheetah.Domain
4) in the second run java -classpath . Cheetah.Client

Client accepts three parameters in order:
 <DomainHostAddress> <DomainPort> <ClientName>

defaults should be sufficient on a single machine test.

when all is working properly for this first iteration a JFrame window
will appear with the title "Success"

this proves the following things are happening:

A symetrical kernel on both Client and Domain are functioning each
engineered to send out messages and forget about them.(one way
communication).

The "Success" JFrame is a mobile agent with no coder restrictions, no
conformance to any API's or frills.  It is simply a JFrame with a
titlebar string.  If this is working it proves the HTTP daemon is
functioning adequately enough for the URLClassLoader method to abide.
This is all that's necesarry for mobile code so far as I can
tell. Other things can be requested from the httpd as well but this
portion of code really needs to have a sandbox or repository outside of
the codebase itself before too many further security sensabilities are
trod upon.

Domain and Client are negotiating and updating dynamic port
allocations and as the logs will atest, listening sockets are
advertised in round-robin fashion.

Clients can be killed and restarted on seperate machines and will
update the route of the Room Server.  Rooms are not tied to the Domain
Agents but for simplicity's sake I hardwired these transaction
entities into a tidy test case.

